{"version":3,"sources":["logo.svg","services/baseService.js","App.js","services/authService.js","reportWebVitals.js","index.js"],"names":["host","BaseService","window","location","hostname","baseUrl","url","includes","axios","create","baseURL","undefined","app_Key","process","console","log","apiKey","shopOrigin","shop","interceptors","request","use","config","app","createApp","getSessionToken","then","token","headers","App","useState","message","setMessage","handleButton","a","post","res","catch","error","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","params","URLSearchParams","search","get","forceRedirect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAe,I,+CCIXA,EAAO,KACPC,EAAc,KACI,qBAAXC,SACTF,EAAOE,OAAOC,SAASC,UAGzB,IAAIC,EAAU,WAAaL,EAAO,QAE9BM,EAAMN,GAAQA,EAAKO,SAAS,aADlB,6BAC2CF,EAKzD,GAJAJ,EAAcO,IAAMC,OAAO,CACzBC,QAASJ,SAGUK,UAAVT,OAAqB,CAE9B,IAAIU,EAAUC,mCAEdC,QAAQC,IAAI,MAAM,CACdC,OAAQJ,EACRK,WAAYf,OAAOgB,OAGvBjB,EAAYkB,aAAaC,QAAQC,KAAI,SAAUC,GAC7C,IAAMC,EAAMC,IAAU,CACpBR,OAAQJ,EACRK,WAAYf,OAAOgB,OAErB,OAAOO,0BAAgBF,GACpBG,MAAK,SAACC,GAGL,OADAL,EAAOM,QAAP,+BAA4CD,GACrCL,QAKArB,Q,WCPA4B,MA1Bf,WAAgB,IAAD,EAEiBC,mBAAS,eAF1B,mBAENC,EAFM,KAEGC,EAFH,KAIPC,EAAY,uCAAG,sBAAAC,EAAA,sDACnBpB,QAAQC,IAAI,SCVUT,EDWA,cCVfL,EAAYkC,KAAK7B,EAAK,KDUYoB,MAAK,SAACU,GAC7CJ,EAAW,kCACVK,OAAM,SAACC,GACRN,EAAWM,MALM,iCCThB,IAAmBhC,IDSH,OAAH,qDAUlB,OACE,gCACE,wBAAQiC,QAAS,WACfN,KADF,oBAGA,uBAAM,uBACN,4BAAIF,QEfKS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCURO,G,OAAS,IAAIC,gBAAgB/C,OAAOC,SAAS+C,SACnDhD,OAAOgB,KAAO8B,EAAOG,IAAI,QACzBrC,QAAQC,IAAI,QAEZD,QAAQC,IAAI,MAAM,CAChBC,OAAQH,mCACRI,WAAYf,OAAOgB,KACnBkC,eAAe,IAKjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,WAAD,CACEjC,OAAQ,CACNN,OAAQH,mCACRI,WAAYf,OAAOgB,KACnBkC,eAAe,GAJnB,SAOE,cAAC,EAAD,QAGJI,SAASC,eAAe,SAM1BjB,K","file":"static/js/main.23d21162.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\r\nimport { getSessionToken } from \"@shopify/app-bridge-utils\";\r\nimport createApp from \"@shopify/app-bridge\";\r\n\r\nvar host = null;\r\nvar BaseService = null;\r\nif (typeof window !== \"undefined\") {\r\n  host = window.location.hostname;\r\n}\r\n\r\nvar baseUrl = \"https://\" + host + \"/api/\";\r\nvar tempURL = \"http://localhost:8080/api/\";\r\nvar url = host && host.includes(\"localhost\") ? tempURL : baseUrl;\r\nBaseService = axios.create({\r\n  baseURL: url,\r\n});\r\n\r\nif (typeof window != undefined) {\r\n  // consle.log(\"process.env.REACT_APP_API_KEY\", process.env.NEXT_PUBLIC_API_KEY);\r\n  let app_Key = process.env.REACT_APP_API_KEY;\r\n\r\n  console.log(\"inn\",{\r\n      apiKey: app_Key,\r\n      shopOrigin: window.shop,\r\n    });\r\n\r\n  BaseService.interceptors.request.use(function (config) {\r\n    const app = createApp({\r\n      apiKey: app_Key,\r\n      shopOrigin: window.shop,\r\n    });\r\n    return getSessionToken(app) // requires an App Bridge instance\r\n      .then((token) => {\r\n        // append your request headers with an authenticated token\r\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n        return config;\r\n      });\r\n  });\r\n}\r\n\r\nexport default BaseService;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport * as AuthService from \"./services/authService\";\nimport { useState } from 'react';\n\n\n\nfunction App() {\n\n  const [message, setMessage] = useState(\"Verifing...\");\n\n  const handleButton = async () => {\n    console.log(\"innn\");\n    AuthService.verifyApp(\"/app/verify\", {}).then((res) => {\n      setMessage(\"Application is working fine\")\n    }).catch((error) => {\n      setMessage(error);\n    })\n  }\n\n\n  return (\n    <div>\n      <button onClick={() => {\n        handleButton();\n      }}>Verify</button>\n      <br /><br />\n      <p>{message}</p>\n    </div>\n\n  );\n}\n\nexport default App;\n","import BaseService from \"./baseService\";\r\n\r\nexport function verifyApp(url) {\r\n    return BaseService.post(url, {});\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { AppProvider } from \"@shopify/polaris\";\nimport { Provider, useAppBridge } from \"@shopify/app-bridge-react\";\nimport { authenticatedFetch } from \"@shopify/app-bridge-utils\";\nimport \"@shopify/polaris/dist/styles.css\";\n\n//----------------------------------------------------------------------------------\n\n/**\n * get query parameters\n */\n\nconst params = new URLSearchParams(window.location.search);\nwindow.shop = params.get(\"shop\");\nconsole.log(\"shop\");\n\nconsole.log(\"asd\",{\n  apiKey: process.env.REACT_APP_API_KEY,\n  shopOrigin: window.shop,\n  forceRedirect: true,\n});\n\n//----------------------------------------------------------------------------------\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider\n      config={{\n        apiKey: process.env.REACT_APP_API_KEY,\n        shopOrigin: window.shop,\n        forceRedirect: true,\n      }}\n    >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}